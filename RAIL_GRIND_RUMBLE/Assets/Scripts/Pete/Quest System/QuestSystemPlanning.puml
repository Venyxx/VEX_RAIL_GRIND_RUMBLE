@startuml
'https://plantuml.com/class-diagram

'STILL IN PROGRESS

class MonoBehaviour
{
    //Unity MonoBehaviour//
}

abstract class Quest
{
    +bool isActive
    +bool isComplete
    #[SerializedField] string name
    #[SerializedField] string description
    #[SerializedField] List<QuestReward> questRewards
    //make sure it does not derive from monobehaviour//
    //all classes that inherit from quest need the [Serializable] attribute//
}

class CountQuest
{
    -[SerializedField] int currentCount
    -[SerializedField] int completionCount
    
    +void checkWin() //sets isComplete to true if currentCount == completionCount// 
}

enum CountQuestTypes
{
    Grind, Graffiti, SpeedMeter, Coins
}



class RivalQuest
{
    //rival quests will need their own unique logic and AI//
}


class QuestGiver
{
    //attaches to NPC objects, derives from monobehaviour//
    -[SerializedField] Quest questToGive;
    -[SerializedField] GameObject questWindow
    -[SerializedField] TextMeshProUGUI titleText
    -[SerializedField] TextMeshProUGUI descText
    -[SerializedField] TextMeshProUGUI rewardText;
    //not sure if the player will need its own new quest script of if questing logic can go in an existing one//
    - //PlayerReference// player;
    +void OpenQuestWindow()
    +void AcceptQuest()
    +void CompleteQuest
}


interface QuestReward
{
    //interface since QuestRewards need to have RewardPlayer but that logic will vary from reward to reward//
    +void RewardPlayer()
    +String ToString() //so that the reward can be described in text in the quest window//
}

QuestReward "has" *-- Quest
Quest "gives" *-- QuestGiver
QuestGiver "inherits from"<|-- MonoBehaviour
CountQuest "inherits from"<|-- Quest
RivalQuest "inherits from"<|-- Quest
CountQuest "has" *-- CountQuestTypes

@enduml